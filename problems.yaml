# min-cost-flow
# min-cost-flow-integer-capacity
# min-cost-flow-integer-cost
# min-cost-flow-all-integers

# this allows us to do inheritance!

# In the testing branch there will be exactly $4$ problems so it can form a diamond.
      
# note if we add _ to indicate it is some formal information for the computer to process.

---
id: shortest-path
name: Shortest path
description: The shortest path tree problem on directed graph.
parameters:
  - type: input
    name: G
    description: A input directed graph $G=(V,E)$
  - type: input
    name: w
    description: A function $w:E\to \R^+$.
  - type: input
    name: s
    description: a vertex $s\in V$, the root vertex of the shortest path tree.
  - type: output
    name: T
    description: The shortest path tree rooted at vertex $s$
  - type: complexity
    name: n
    description: the number of vertices of $G$.
  - type: complexity
    name: m
    description: the number of edges of $G$.
algorithms: [dijkstra]
---
id: min-cost-flow
name: min-cost flow
description: Given a graph with edge capacity and cost, find the min-cost flow.
parameters:
  - type: input
    name: G
    description: A input directed graph $G=(V,E)$
  - type: input
    name: c
    description: The cost function $c:E\to \R$
  - type: input
    name: u
    description: The capacity function, $u:E\to \R^+\cup \set{\infty}$
  - type: input
    name: v
    description: The value $v\in \R$ of the flow.
  - type: input
    name: st
    description: The source and sink vertices $s$ and $t$.
  - type: output
    name: f
    description: A minimum cost $st$-flow $f:E\to \R$ of value $v$.
  - type: complexity
    name: n
    description: number of vertices of $G$.
  - type: complexity
    name: m
    description: number of edges of $G$.
  - type: complexity
    name: m'
    description: number of edges with infinite capacity.
algorithms: [min-cost-flow-orlin-91]
---
id: min-cost-flow-integer-capacity
inherit: [min-cost-flow]
name: min-cost flow (integer capacity)
parameters:
  - type: input
    name: u
    description: The capacity function, $u:E\to \N$
  - type: input
    name: v
    description: $v\in \N$ the value of the flow.
  - type: complexity
    name: U
    description: upper bound on the absolute value of the capacity
algorithms: [min-cost-flow-integer-capacity-edmonds-karp]
---
id: min-cost-flow-integer-cost
inherit: [min-cost-flow]
name: min-cost flow (integer cost)
parameters:
  - type: input
    name: c
    description: The cost function $c:E\to \N$
  - type: complexity
    name: C
    description: upper bound on the absolute value of the cost
algorithms: [min-cost-flow-integer-cost-goldber-tarjan-87]
---
id: min-cost-flow-all-integers
inherit: [min-cost-flow-integer-cost, min-cost-flow-integer-capacity]
name: min-cost flow (integer cost and capacity)
algorithms: [min-cost-flow-all-integers-agot-98]






---
id: h-index
name: The $h$-index problem
inherit: [weighted-h-index]
parameters:
  - type: input
    name: a
    description: Positive integers $a_1,\ldots,a_n$
  - type: input
    name: w
    description: 
  - type: output
    name: h
    description: the largest value $h$ such that $|\set{i | a_i \geq h}|\geq h$.
algorithms: [h-index-sort]
---
id: weighted-h-index
name: The weighted $h$-index problem
parameters:
  - type: input
    name: a
    description: Positive reals $a_1,\ldots,a_n$
  - type: input
    name: w
    description: Positive reals weights $w_1,\ldots,w_n$
  - type: output
    name: h
    description: the largest value $h$ such that $\sum_{i:a_i\geq h} w_i \geq h$.
  - type: complexity
    name: n
    description: length of the $a$
algorithms: [weighted-h-index-selection]
---
name: Meet of two partitions
parameters:
  - type: input
    name: partitions
    description: $\mathcal{A}$ and $\mathcal{B}$ partitions of $[n]$.
  - type: output
    name: meet
    description: The meet of $\mathcal{A}$ and $\mathcal{B}$, $\mathcal{C}=\set{A\cap B \mid A\in \mathcal{A}, B\in \mathcal{B}}$.
  - type: complexity
    name: n
    description: The size of the universe.
algorithms: [meet-two-partitions-1,meet-two-partitions-2]
---
id: min-max-sum-k-partition-array
name: Partition minimize maximum sum of subarrays
parameters:
  - type: input
    name: G
    description: $G=(V,E)$ a path
inherit: [min-max-weight-component-tree]
---
id: min-max-weight-component-tree
name: Minimize maximum weight component
parameters:
  - type: input
    name: G
    description: $G=(V,E)$ a tree
  - type: input
    name: w
    description: a positive vertex weight function $w:V\to \R^+$
  - type: input
    name: k
    description: $k\in \N$
  - type: output
    name: out
    description: The set of $k$ edges to remove, such that the maximum of the sum of the weights of each component is minimized.
  - type: complexity
    name: n
    description: the number of vertices in the input
  - type: complexity
    name: k
    description: $k$
---
id: bottleneck-k-link-path
name: Bottleneck $k$-link path
description:  such that the maximum weight of the edges in the path is minimized.
parameters:
  - type: input
    name: G
    description: $G=(V,E)$ a complete DAG with vertex ordering $v_1,\ldots,v_n$.
  - type: input
    name: w
    description: An ordered weight function $w:E\to \R$
  - type: input
    name: k
    description: $k$
  - type: output
    name: out
    description: A bottleneck shortest path consists of exactly $k$ edges in $G$ from $v_1$ to $v_n$ with weights $w$.
  - type: complexity
    name: n
    description: Number of vertices in $G$
  - type: complexity
    name: k
    description: $k\in \N$
note: See [ordered weight of complete DAG] and [Bottleneck $k$-link path](https://chaoxuprime.com/posts/2019-01-31-bottleneck-k-link-path.html).
related:
  - problem: min-max-sum-k-partition-array
    relation: reduction
    description: When the weight of edge $w(i,j)$ is sum of elements from $i$th to $j-1$th.

---
id: upper-bound-by-piecewise-constant-function
name: Upper bound by piecewise constant function
parameters:
  - type: input
    name: k
    description: a positive integer $k$
  - type: input
    name: a
    description: A sequence of $n$ values $a_1,\ldots,a_n$
  - type: complexity
    name: n
  - type: output
    name: f
    description: A piecewise constant function consists of $k$ pieces. Such $f(i)\geq a_i$ and $\sum_{i=1}^n f(i)-a_i$ is minimized.
note: Looks like $O(kn^2)$ by dynamic programming is possible. HW 6 of CS 374 Spring 2019 at UIUC
---
id: directed-graph-agony
name: Agony of a directed graph
parameters:
  - type: input
    name: k
    description: a positive integer $k$
  - type: input
    name: G
    description: A directed graph $G=(V,E)$.
  - type: complexity
    name: n
    description: The size of $V$.
  - type: complexity
    name: m
    description: The size of $E$.
  - type: output
    name: f
    description: A function $f:V\to [k]$, such that $\sum_{uv\in E} \max(f(u)-f(v)+1,0)$ is minimized. 
note: This problem is the agony problem https://arxiv.org/abs/1903.02999
---
id: heaviest-subgraph
name: Heaviest subgraph
parameters:
  - type: input
    name: w
    description: $w:E\to \R^+$ a positive weight function
  - type: input
    name: c
    description: $c:V\to \R^+$ a positive cost function
  - type: input
    name: G
    description: A graph $G=(V,E)$.
  - type: complexity
    name: n
    description: The size of $V$.
  - type: complexity
    name: m
    description: The size of $E$.
  - type: output
    name: U
    description: A subset of vertices $U$, such that $w(E(G[U]))-c(U)$ is maximized. 
note: this problem can be converted to a min-cut problem, solution method is similar to densest subgraph problem